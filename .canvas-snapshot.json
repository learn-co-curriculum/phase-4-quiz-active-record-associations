{
  "quiz": {
    "id": 18304,
    "title": "Active Record Associations Quiz",
    "html_url": "https://learning.flatironschool.com/courses/4182/quizzes/18304",
    "mobile_url": "https://learning.flatironschool.com/courses/4182/quizzes/18304?force_user=1&persist_headless=1",
    "description": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-4-quiz-active-record-associations\"></div>\n<header class=\"fis-header\">\n  <a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-4-quiz-active-record-associations/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a>\n</header>\n\n<p>It's time to check your knowledge! Use this quiz to create a custom study guide.\nNote any answers that were marked incorrect, so you can study the relevant\nmaterial and try this quiz again.<br>\nIf you don't know the answer to a question, please do not guess. Instead, select\n\"I don't know\". It's OK not to know everything and to admit when we're unsure.</p>\n\n<p>If you get stuck, check out these pages from the Rails guides:</p>\n\n<ul>\n<li><a href=\"https://guides.rubyonrails.org/association_basics.html\">Association Basics</a></li>\n<li><a href=\"https://guides.rubyonrails.org/routing.html#nested-resources\">Rails Routing: Nested Resources</a></li>\n</ul>",
    "quiz_type": "assignment",
    "time_limit": null,
    "timer_autosubmit_disabled": false,
    "shuffle_answers": true,
    "show_correct_answers": true,
    "scoring_policy": "keep_highest",
    "allowed_attempts": 3,
    "one_question_at_a_time": true,
    "question_count": 8,
    "points_possible": 8.0,
    "cant_go_back": false,
    "access_code": null,
    "ip_filter": null,
    "due_at": null,
    "lock_at": null,
    "unlock_at": null,
    "published": false,
    "unpublishable": true,
    "locked_for_user": true,
    "lock_info": {
      "missing_permission": "participate_as_student",
      "asset_string": "quizzes:quiz_18304"
    },
    "lock_explanation": "This quiz is currently locked.",
    "hide_results": "until_after_last_attempt",
    "show_correct_answers_at": null,
    "hide_correct_answers_at": null,
    "all_dates": [
      {
        "due_at": null,
        "unlock_at": null,
        "lock_at": null,
        "base": true
      }
    ],
    "can_unpublish": true,
    "can_update": true,
    "require_lockdown_browser": false,
    "require_lockdown_browser_for_results": false,
    "require_lockdown_browser_monitor": false,
    "lockdown_browser_monitor_data": null,
    "speed_grader_url": null,
    "permissions": {
      "manage": true,
      "read": true,
      "create": true,
      "update": true,
      "submit": true,
      "preview": true,
      "delete": true,
      "read_statistics": true,
      "grade": true,
      "review_grades": true,
      "view_answer_audits": true
    },
    "quiz_reports_url": "https://learning.flatironschool.com/api/v1/courses/4182/quizzes/18304/reports",
    "quiz_statistics_url": "https://learning.flatironschool.com/api/v1/courses/4182/quizzes/18304/statistics",
    "message_students_url": "https://learning.flatironschool.com/api/v1/courses/4182/quizzes/18304/submission_users/message",
    "section_count": 1,
    "important_dates": false,
    "quiz_submission_versions_html_url": "https://learning.flatironschool.com/courses/4182/quizzes/18304/submission_versions",
    "assignment_id": 124633,
    "one_time_results": false,
    "only_visible_to_overrides": false,
    "assignment_group_id": 8385,
    "show_correct_answers_last_attempt": true,
    "version_number": 4,
    "has_access_code": false,
    "post_to_sis": false,
    "migration_id": null,
    "question_types": [
      "multiple_answers_question",
      "matching_question",
      "multiple_choice_question",
      "short_answer_question"
    ]
  },
  "questions": [
    {
      "quiz_id": 18304,
      "id": 123872,
      "quiz_group_id": null,
      "assessment_question_id": 134141,
      "position": null,
      "question_name": "Active Record: Association Methods",
      "question_type": "matching_question",
      "question_text": "<p>Given the following tables:</p>\n\n<p><img src=\"https://learning.flatironschool.com/assessment_questions/128066/files/1675669/download?verifier=KJMKzrekSGY4T4U66BH6yHtViaGPqOzSjQffluGd\" alt=\"Albums-Songs Domain\"></p>\n\n<p>Match the correct Active Record association method with the corresponding model.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/4182/assignments/116252\">Active Record Associations Review</a></li></ul><p></p>",
      "answers": [
        {
          "id": 2884,
          "text": "Album",
          "left": "Album",
          "right": "has_many :songs",
          "comments": "",
          "comments_html": "",
          "match_id": 3198
        },
        {
          "id": 6009,
          "text": "Song",
          "left": "Song",
          "right": "belongs_to :album",
          "comments": "",
          "comments_html": "",
          "match_id": 4705
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": [
        {
          "text": "has_many :songs",
          "match_id": 3198
        },
        {
          "text": "belongs_to :album",
          "match_id": 4705
        }
      ],
      "matching_answer_incorrect_matches": ""
    },
    {
      "quiz_id": 18304,
      "id": 123873,
      "quiz_group_id": null,
      "assessment_question_id": 132923,
      "position": null,
      "question_name": "Deleting Associated Data",
      "question_type": "multiple_choice_question",
      "question_text": "<p>We're working on a domain where a <strong>song belongs to an album</strong>. Before we can\ndelete an album from the database, we must delete all the songs associated with\nthat album; otherwise, the songs will still exist without knowing which album\nthey're associated with.</p>\n\n<p>Which of the following code blocks will help to delete all the songs associated\nwith an album when the album is deleted?</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/4182/assignments/124300\">Deleting Associated Data</a></li></ul><p></p>",
      "answers": [
        {
          "id": 6197,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"k\">class</span> <span class=\"nc\">Album</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationRecord</span>\n  <span class=\"n\">has_many</span> <span class=\"ss\">:songs</span><span class=\"p\">,</span> <span class=\"ss\">dependent: :destroy</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Right! A song <strong>depends on</strong> an album in our domain; we can't have a song that\ndoesn't have an associated album. We can use the <code>dependent</code> option of the\n<code>has_many</code> macro to add behavior to the <code>Album</code> class so that before an album\nis deleted, its associated songs are deleted first.</p>",
          "weight": 100.0
        },
        {
          "id": 7715,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"k\">class</span> <span class=\"nc\">Song</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationRecord</span>\n  <span class=\"n\">belongs_to</span> <span class=\"ss\">:album</span><span class=\"p\">,</span> <span class=\"ss\">dependent: :destroy</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Not quite. A song <strong>depends on</strong> an album in our domain; we can't have a song\nthat doesn't have an associated album. Therefore, we must add some additional\nbehavior to the <code>Album</code> class so that before an album is deleted, its\nassociated songs are deleted first.</p>",
          "weight": 0.0
        },
        {
          "id": 4372,
          "text": "",
          "html": "<p>I don't know.</p>",
          "comments": "",
          "comments_html": "",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 18304,
      "id": 123874,
      "quiz_group_id": null,
      "assessment_question_id": 132924,
      "position": null,
      "question_name": "Displaying Associated Data",
      "question_type": "short_answer_question",
      "question_text": "<p>We're working on a domain where an <strong>album has many songs</strong>.</p>\n\n<p>When a user makes a <code>GET</code> request to <code>/albums/:id</code>, we want to return a JSON\nresponse that includes the album along with its associated songs, like so:</p>\n<div class=\"highlight\"><pre class=\"highlight json\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"title\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Shrek: Music from the Original Motion Picture\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"year\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2001</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"songs\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n    </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"nl\">\"id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"title\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"All Star\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"artist\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Smash Mouth\"</span><span class=\"w\">\n    </span><span class=\"p\">},</span><span class=\"w\">\n    </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"nl\">\"id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">15</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"title\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Best Years of Our Lives\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"artist\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Baha Men\"</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div>\n<p>Fill in the blank in the code below. What code would you write to return all the\nsongs associated with an album?</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"k\">class</span> <span class=\"nc\">AlbumsController</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationController</span>\n  <span class=\"k\">def</span> <span class=\"nf\">show</span>\n    <span class=\"n\">album</span> <span class=\"o\">=</span> <span class=\"no\">Album</span><span class=\"p\">.</span><span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"ss\">:id</span><span class=\"p\">])</span>\n    <span class=\"n\">render</span> <span class=\"ss\">json: </span><span class=\"n\">album</span><span class=\"p\">,</span> <span class=\"n\">_________</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/4182/assignments/117174\">Displaying Associated Data</a></li></ul><p></p>",
      "answers": [
        {
          "id": 8606,
          "text": "include: :songs",
          "comments": "",
          "comments_html": "",
          "weight": 100
        },
        {
          "id": 5472,
          "text": "include: [:songs]",
          "comments": "",
          "comments_html": "",
          "weight": 100
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 18304,
      "id": 123875,
      "quiz_group_id": null,
      "assessment_question_id": 132925,
      "position": null,
      "question_name": "Displaying Associated Data",
      "question_type": "short_answer_question",
      "question_text": "<p>We're working on a domain where a <strong>song belongs to an album</strong>.</p>\n\n<p>When a user makes a <code>GET</code> request to <code>/songs/:id</code>, we want to return a JSON\nresponse that includes the song along with its associated album, like so:</p>\n<div class=\"highlight\"><pre class=\"highlight json\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"title\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"All Star\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"artist\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Smash Mouth\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"album\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"title\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Shrek: Music from the Original Motion Picture\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"year\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2001</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div>\n<p>What code would you write to return the album associated with one specific song\nas a nested object in the response?</p>\n\n<p>Fill in the blank in the code below:</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"k\">class</span> <span class=\"nc\">SongsController</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationController</span>\n  <span class=\"k\">def</span> <span class=\"nf\">show</span>\n    <span class=\"n\">song</span> <span class=\"o\">=</span> <span class=\"no\">Song</span><span class=\"p\">.</span><span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"ss\">:id</span><span class=\"p\">])</span>\n    <span class=\"n\">render</span> <span class=\"ss\">json: </span><span class=\"n\">song</span><span class=\"p\">,</span> <span class=\"n\">_________</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/4182/assignments/117174\">Displaying Associated Data</a></li></ul><p></p>",
      "answers": [
        {
          "id": 5859,
          "text": "include: :album",
          "comments": "",
          "comments_html": "",
          "weight": 100
        },
        {
          "id": 9482,
          "text": "include: [:album]",
          "comments": "",
          "comments_html": "",
          "weight": 100
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 18304,
      "id": 123876,
      "quiz_group_id": null,
      "assessment_question_id": 134145,
      "position": null,
      "question_name": "Active Record: Nested Routing",
      "question_type": "multiple_answers_question",
      "question_text": "<p>We're working on a domain where an <strong>album has many songs</strong>. Which of the\nfollowing nested routes follow RESTful routing conventions? Select all that\napply:</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/4182/assignments/117176\">Nested Resource Routing</a></li></ul><p></p>",
      "answers": [
        {
          "id": 8070,
          "text": "",
          "comments": "",
          "comments_html": "<p>Correct! Since an album has many songs, we can represent this relationship by\nnesting a route that will return a list of songs under the route that will\nreturn one individual album.</p>",
          "weight": 100.0,
          "html": "<p><code>/albums/:album_id/songs</code></p>"
        },
        {
          "id": 377,
          "text": "",
          "comments": "",
          "comments_html": "<p>Correct! Since an album has many songs, we can represent this relationship by\nnesting a route that will return a list of songs under the route that will\nreturn one individual album, and we can also access one song from this list\nusing the song's ID.</p>",
          "weight": 100.0,
          "html": "<p><code>/albums/:album_id/songs/:id</code></p>"
        },
        {
          "id": 4458,
          "text": "",
          "comments": "",
          "comments_html": "<p>Not quite. Since a song can only belong to one album, it doesn't make sense to\nhave a route that lists multiple albums nested under a route for displaying an\nindividual song.</p>",
          "weight": 0.0,
          "html": "<p><code>/songs/:song_id/albums</code></p>"
        },
        {
          "id": 443,
          "text": "",
          "comments": "",
          "comments_html": "<p>Not quite. Since a song can only belong to one album, it doesn't make sense to\nhave a route that lists multiple albums nested under a route for displaying an\nindividual song.</p>",
          "weight": 0.0,
          "html": "<p><code>/songs/:song_id/albums/:id</code></p>"
        },
        {
          "id": 6897,
          "text": "",
          "comments": "",
          "comments_html": "<p>While you could make this route work, it doesn't take advantage of RESTful\nconventions to represent the relationship between songs and albums in a\nmeaningful way.</p>",
          "weight": 0.0,
          "html": "<p><code>/songs?album_id=1</code></p>"
        },
        {
          "id": 9059,
          "text": "",
          "comments": "",
          "comments_html": "",
          "weight": 0.0,
          "html": "<p>I don't know.</p>"
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 18304,
      "id": 123877,
      "quiz_group_id": null,
      "assessment_question_id": 132927,
      "position": null,
      "question_name": "Active Record Associations",
      "question_type": "multiple_answers_question",
      "question_text": "<p>To create the following relationship:</p>\n\n<ul>\n<li>A <strong>team</strong> has many <strong>players</strong></li>\n<li>A <strong>player</strong> belongs to a <strong>team</strong></li>\n</ul>\n\n<p>What foreign keys would need need to be added to what database tables?</p>\n\n<p>Select all that apply:</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/4182/assignments/116252\">Active Record Associations Review</a></li></ul><p></p>",
      "answers": [
        {
          "id": 7324,
          "text": "",
          "comments": "",
          "comments_html": "<p>A foreign key should refer to the primary key from another table (unless we're\ncreating a self-joining relationship, which is not the case here), so there's\nno need to create a foreign key on the <code>teams</code> table that refers to the\nprimary key on the <code>teams</code> table.</p>",
          "weight": 0.0,
          "html": "<p>Add a <code>team_id</code> foreign key to the <code>teams</code> table.</p>"
        },
        {
          "id": 7661,
          "text": "",
          "comments": "",
          "comments_html": "<p>If we were to add a <code>player_id</code> key to the <code>teams</code> table, that would establish\nthe opposite of the relationship we're after. A <code>player</code> should belong to a\n<code>team</code>, not the other way around.</p>",
          "weight": 0.0,
          "html": "<p>Add a <code>player_id</code> foreign key to the <code>teams</code> table.</p>"
        },
        {
          "id": 6535,
          "text": "",
          "comments": "",
          "comments_html": "<p>Right on!</p>",
          "weight": 100.0,
          "html": "<p>Add a <code>team_id</code> foreign key to the <code>players</code> table.</p>"
        },
        {
          "id": 3368,
          "text": "",
          "comments": "",
          "comments_html": "",
          "weight": 0.0,
          "html": "<p>I don't know.</p>"
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 18304,
      "id": 123878,
      "quiz_group_id": null,
      "assessment_question_id": 132929,
      "position": null,
      "question_name": "Active Record: Table Relationships",
      "question_type": "multiple_answers_question",
      "question_text": "<p>To create the following relationship:</p>\n\n<ul>\n<li>A <strong>doctor</strong> has many <strong>appointments</strong></li>\n<li>A <strong>doctor</strong> has many <strong>patients</strong> through <strong>appointments</strong></li>\n<li>An <strong>appointment</strong> belongs to a <strong>doctor</strong></li>\n<li>An <strong>appointment</strong> belongs to a <strong>patient</strong></li>\n<li>A <strong>patient</strong> has many <strong>appointments</strong></li>\n<li>A <strong>patient</strong> has many <strong>doctors</strong> through <strong>appointments</strong></li>\n</ul>\n\n<p>What foreign keys would need need to be added to what database tables? Select\nall that apply:</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/4182/assignments/116252\">Active Record Associations Review</a></li></ul><p></p>",
      "answers": [
        {
          "id": 678,
          "text": "",
          "comments": "",
          "comments_html": "<p>Right! An appointment belongs to a patient, so we need the <code>patient_id</code>\nforeign key on the <code>appointments</code> table to establish this relationship.</p>",
          "weight": 100.0,
          "html": "<p>Add a <code>patient_id</code> foreign key to the <code>appointments</code> table</p>"
        },
        {
          "id": 6609,
          "text": "",
          "comments": "",
          "comments_html": "<p>Right! An appointment belongs to a doctor, so we need the <code>doctor_id</code> foreign\nkey on the <code>appointments</code> table to establish this relationship.</p>",
          "weight": 100.0,
          "html": "<p>Add a <code>doctor_id</code> foreign key to the <code>appointments</code> table</p>"
        },
        {
          "id": 1916,
          "text": "",
          "comments": "",
          "comments_html": "<p>This would mean that a doctor belongs to an appointment, which is the opposite\nof what we want here.</p>",
          "weight": 0.0,
          "html": "<p>Add an <code>appointment_id</code> foreign key to the <code>doctors</code> table</p>"
        },
        {
          "id": 9115,
          "text": "",
          "comments": "",
          "comments_html": "<p>This would mean that a patient belongs to an doctor; however, a patient can\nhave many doctors.</p>",
          "weight": 0.0,
          "html": "<p>Add an <code>patient_id</code> foreign key to the <code>doctors</code> table</p>"
        },
        {
          "id": 4287,
          "text": "",
          "comments": "",
          "comments_html": "<p>This would mean that a patient belongs to an appointment, which is the opposite\nof what we want here.</p>",
          "weight": 0.0,
          "html": "<p>Add an <code>appointment_id</code> foreign key to the <code>patients</code> table</p>"
        },
        {
          "id": 1843,
          "text": "",
          "comments": "",
          "comments_html": "<p>This would mean that a doctor belongs to an patient; however, a doctor can\nhave many patients.</p>",
          "weight": 0.0,
          "html": "<p>Add an <code>doctor_id</code> foreign key to the <code>patients</code> table</p>"
        },
        {
          "id": 8665,
          "text": "",
          "comments": "",
          "comments_html": "",
          "weight": 0.0,
          "html": "<p>I don't know.</p>"
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    }
  ]
}